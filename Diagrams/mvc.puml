@startuml
'https://plantuml.com/class-diagram

MainWindow *-- TabStudents
TabStudents *-- TabStudentsController
TabStudentsController *-- TabStudents
DataList ..> DataTable
TabStudentsController o-- DataListStudentShort
TabStudentsController o-- StudentRepository

StudentInputForm *-u- StudentInputFormControllerCreate
StudentInputFormControllerCreate *-- StudentInputForm
StudentInputFormControllerCreate o-- StudentRepository

StudentInputForm *-u- StudentInputFormControllerEdit
StudentInputFormControllerEdit *-- StudentInputForm
StudentInputFormControllerEdit o-- StudentRepository

class MainWindow {
    --
    +create(): Window
}

class TabStudents {
    -controller: TabStudentsController
    -current_page: Integer
    -total_count: Integer
    --
    +create(): HorizontalBox
    +on_create()
    +on_datalist_changed(DataTable)
    +update_student_count(Integer)
}

class TabStudentsController {
    -students_rep: StudentRepository
    -view: TabStudents
    -data_list: DataListStudentShort
    --
    +initialize(view)
    +show_view()
    +show_modal_add()
    +show_modal_edit(Integer, Integer)
    +refresh_data(Integer, Integer)
    +on_view_created()
    -on_db_conn_error()
}

class StudentInputForm {
    -controller: StudentInputFormController
    -existing_student: Student
    -entries: Hash
    --
    +initialize(controller, Student = nil)
    +create(): Window
    +on_create()
    +set_value(Symbol, Object)
    +make_readonly(*Symbol)
    +close()
}

class StudentInputFormControllerCreate {
    -view: StudentInputForm
    -parent_controller
    -student_rep: StudentRepository
    --
    +initialize(parent_controller)
    +set_view(view)
    +on_view_created()
    +process_fields(Hash)
    -on_db_conn_error()
}

class StudentInputFormControllerEdit {
    -view: StudentInputForm
    -parent_controller
    -student_rep: StudentRepository
    -existing_student_id: Integer
    --
    +initialize(parent_controller)
    +set_view(view)
    +on_view_created()
    +process_fields(Hash)
    +populate_fields()
    -on_db_conn_error()
}

class DataTable {
    -table: Array
    -rows_count: Integer
    -cols_count: Integer
    --
    +initialize(Array)
    +get_item(Integer, Integer): Object
    +to_2d_array(): Array
    .. Геттеры ..
    +rows_count(): Integer
    +cols_count(): Integer
    -table(): Array
    .. Сеттеры ..
    -rows_count=(Integer)
    -cols_count=(Integer)
    -table=(Array)
}

abstract class DataList {
    -objects: Array
    -selected_num: Integer
    -listeners: Array
    --
    -initialize(Array)
    +select_element(Integer)
    +data_table(): DataTable
    +selected_id(): Integer
    +replace_objects(Array)
    +add_listener(Object)
    +remove_listener(Object)
    +notify()
    #column_names(): Array
    #table_fields(Object): Array
    .. Геттеры ..
    -selected_num(): Integer
    -objects(): Array
    .. Сеттеры ..
    -selected_num=(Integer)
    +objects=(Array)
}

class DataListStudentShort extends DataList {
    --
    +initialize(Array)
    +column_names(): Array
    #table_fields(StudentShort): Array
}

class StudentRepository {
    -data_source_adapter
    --
    +initialize(data_source_adapter)
    +student_by_id(Integer): Student
    +paginated_short_students(Integer, Integer, DataList=nil): DataList
    +add_student(Student): Integer
    +replace_student(Integer, Student)
    +remove_student(Integer)
    +student_count(): Integer
}
@enduml